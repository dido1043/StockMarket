plugins {
    id 'java'
    id 'io.quarkus'
    id "org.sonarqube" version "6.3.1.5724"
    id 'jacoco'
}
sonar {
    properties {
        property "sonar.projectKey", "dido1043_StockMarket"
        property "sonar.organization", "dido1043"
    }
}
repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-hibernate-orm'
    implementation 'io.quarkus:quarkus-spring-data-jpa'
    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation("io.quarkus:quarkus-rest-jsonb")
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-rest'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation 'io.quarkus:quarkus-config-yaml'
    implementation("io.quarkus:quarkus-rest-client-jackson")

    // Quarkus test runner
    testImplementation "io.quarkus:quarkus-junit5"

    // HTTP testing
    testImplementation "io.rest-assured:rest-assured:5.4.0"

    // Assertions
    testImplementation "org.assertj:assertj-core:3.25.3"

    // Mockito
    testImplementation "org.mockito:mockito-core:5.11.0"
    testImplementation "org.mockito:mockito-junit-jupiter:5.11.0"
    // (No need for quarkus-junit5-mockito; we'll use QuarkusMock programmatically)

    // WireMock (for Finnhub tests)
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.35.0"


}

group = 'com.example'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    jacoco {
        includes = ['com.example.*']
    }
}

jacoco {
    toolVersion = '0.8.12'
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true   // Sonar needs XML
        html.required = true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "dido1043_StockMarket"
        property "sonar.organization", "dido1043"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
